import java.util.* ;
import java.io.*; 
public class Deque 
{
    int [] arr;
    int front;
    int rear;
    int size;
    public Deque(int n) 
    {
        this.size = n;
        front = rear = -1;
        arr = new int[this.size];
    }

    public boolean pushFront(int x) 
    {
        if(isFull())
        {
            return false;
        }
        else if(front == -1)
        {
            front = rear = 0;
        }
        else if(front == 0 && rear != size-1)
        {
            front = size - 1;
        }
        else 
        {
            front--;
        }
        arr[front] = x;
        return true;
    }

    public boolean pushRear(int x) 
    {
        if(isFull())
        {
            return false;
        }
        else if(front == -1)
        {
            front = rear = 0;
        }
        else if(rear == size-1 && front != 0)
        {
            rear = 0;
        }
        else 
        {
            rear++;
        }
        arr[rear] = x;
        return true;
    }

    public int popFront() 
    {
        if(front == -1)
        {
            return -1;
        }
        int ans = arr[front];
        if(front == rear)
        {
            front = rear = -1;
        }
        else if(front == size -1)
        {
            front = 0;
        }
        else
        {
            front++;
        }
        return ans;
    }

    public int popRear() 
    {
        if(front == -1)
        {
            return -1;
        }
        
        int ans = arr[rear];
        if(front == rear)
        {
            front = rear = -1;
        }
        else if(rear == 0)
        {
            rear = size-1;
        }
        else 
        {
            rear--;
        }
        return ans;
    }

    public int getFront() 
    {
        if(front == -1)
        {
            return -1;
        }
        else
        {
            return arr[front];
        }
    }

    public int getRear() 
    {
        if(front == -1)
        {
            return -1;
        }
        else 
        {
            return arr[rear];
        }
    }

    public boolean isEmpty() 
    {
        if(front == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public boolean isFull() 
    {
        if((front == 0 && rear == size-1) || (front != 0 && rear == (front-1)%(size-1)))
        {
            return true;
        }
        else 
        {
            return false;
        }
    }
}
