import java.util.* ;
import java.io.*; 
public class CircularQueue {
    int [] arr;
    int front;
    int rear;
    int size;
	// Initialize your data structure.
	public CircularQueue(int n) {
		this.size = n;
        front = rear = -1;
        arr = new int[this.size];
	}

	/*
	   Enqueues 'X' into the queue. Returns true if it gets pushed into the stack,
	   and false otherwise.
	*/
	public boolean enqueue(int value) {
		
        //overflow Condition
        if( (front == 0 && rear == size-1) || (rear == (front - 1)%(size-1)) )
        {
            return false;
        }
        else if(front == -1) 
        {
            //first element condition
            front = rear = 0;
        }
        else if(rear == size-1 && front != 0) 
        {
            //if rear reached last and first index is empty
            rear = 0;
        }
        else
        {
            rear++;
        }
        arr[rear] = value;
        return true;
	}

	/*
	  Dequeues top element from queue. Returns -1 if the stack is empty, otherwise
	  returns the popped element.
	*/
	public int dequeue() {
		
        //empty condition
        if(front == -1)
        {
            return -1;
        }
        else if(front == rear)
        {
            int element = arr[front];
            front = rear = -1;
            return element;
        }
        else if(front == size-1)
        {
            int element = arr[front];
            front = 0;
            return element;
        }
        else
        {
            int element = arr[front];
            front++;
            return element;
        }
	}
};
