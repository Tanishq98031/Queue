package javacodes;

import java.util.Stack;

class sQueue
{
    Stack<Integer> st1 = new Stack<>();
    Stack<Integer> st2 = new Stack<>();
    int size = 0;

    public void offer(int x)
    {
        st1.push(x);
        size += 1;
    }

    public int poll()
    {
        if(st1.empty())
        {
            return -1;
        }
        while (!st1.empty()) {
            st2.push(st1.peek());
            st1.pop();
        }
        int ans = st2.pop();
        while (!st2.empty()) {
            st1.push(st2.peek());
            st2.pop();
        }
        size -= 1;
        return ans;
    }

    public int peek()
    {
        if(st1.empty())
        {
            return -1;
        }
        while (!st1.empty()) {
            st2.push(st1.peek());
            st1.pop();
        }
        int ans = st2.peek();
        while (!st2.empty()) {
            st1.push(st2.peek());
            st2.pop();
        }
        return ans;
    }

    public boolean isEmpty()
    {
        return st1.empty();
    }

    public int size()
    {
        return size;
    }
}

public class QueueUsingStack {
    public static void main(String[] args) {
        sQueue s = new sQueue();
        s.offer(1);
        s.offer(2);
        s.offer(3);
        s.offer(4);
        s.offer(5);

        System.out.println(s.poll());
        System.out.println(s.peek());

        System.out.println(s.size());
        System.out.println(s.isEmpty());
    }
}
